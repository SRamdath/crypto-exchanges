{"version":3,"sources":["Components/CryptoCard.js","Components/ExchangeList.js","Components/ExchangesIndex.js","Components/ExchangePage.js","App.js","reportWebVitals.js","index.js"],"names":["CryptoCard","props","state","img","this","image","url","Card","className","CardContent","Grid","container","spacing","item","md","data","name","Typography","variant","color","component","data_symbols_count","CardMedia","Component","ExchangeList","images","searched","loader","searchField","searchExchanges","bind","a","headers","process","fetch","then","res","json","catch","err","console","error","setState","exchangeId","history","push","pathname","logo","e","preventDefault","result","filter","exchange","toLowerCase","includes","sortedSearch","sort","b","direction","justify","alignItems","CircularProgress","Container","onSubmit","TextField","type","placeholder","onChange","target","value","Button","size","fontSize","map","find","exchange_id","onClick","navigate","length","withRouter","ExchangesIndex","ExchangePage","date","Date","endDate","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","startDate","setSeconds","getSeconds","location","assets","loader2","quote","base","limit","startTime","endTime","graphData","numTrades","graphNote","resetDates","toggleExpand","fetchSnapshot","match","params","symbols","forEach","symbol","asset_id_base","asset_id_quote","symbolId","symbol_id","snap","trade","time_exchange","split","lastDateObj","time","taker_side","buy","sell","obj","timeString","getHours","expand","Object","keys","quotes","isFetchDisabled","Autocomplete","id","options","getOptionLabel","option","val","selectBase","style","width","renderInput","label","selectQuote","selectStart","InputLabelProps","shrink","selectEnd","xs","gutterBottom","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","onChangeCommitted","setLimit","disabled","LineChart","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","App","log","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c02b7952.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nclass CryptoCard extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            ...props\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    render(){\r\n        let img = \"\";\r\n        if (this.state.image){\r\n            img = this.state.image.url;\r\n        }\r\n        return (\r\n            <Card className={\"card\"}>\r\n                <CardContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={8}>\r\n                            <span className={\"cardTitle\"}>\r\n                                {this.state.data.name}\r\n                            </span>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                Symbols: {this.state.data.data_symbols_count}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <CardMedia image={img} component={\"img\"}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CryptoCard;","import React, {Component} from \"react\";\r\nimport CryptoCard from \"./CryptoCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nclass ExchangeList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            images: {},\r\n            searched: [],\r\n            loader: true,\r\n            searchField: \"\"\r\n        }\r\n\r\n        this.searchExchanges = this.searchExchanges.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-CoinAPI-Key': process.env.REACT_APP_APIKEY,\r\n        }\r\n\r\n        let data = await fetch('https://rest.coinapi.io/v1/exchanges', {headers: headers})\r\n            .then(res => res.json())\r\n            .catch(err => console.error(err));\r\n\r\n        if(data.error) data = [];\r\n\r\n        let images = await fetch('https://rest.coinapi.io/v1/exchanges/icons/64', {headers: headers})\r\n            .then(res => res.json())\r\n            .catch(err => console.error(err));\r\n\r\n        if(images.error) images = {};\r\n\r\n        this.setState({\r\n            data: data,\r\n            images: images,\r\n            searched: data,\r\n            loader: false\r\n        });\r\n    }\r\n\r\n    navigate(exchangeId, img){\r\n        this.props.history.push({\r\n            pathname: '/exchange/'+exchangeId,\r\n            logo: img\r\n        });\r\n    }\r\n\r\n    searchExchanges(e){\r\n        e.preventDefault();\r\n\r\n        let result = this.state.data.filter(exchange => {\r\n            return exchange.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        });\r\n        this.setState({\r\n            searched: result\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        let sortedSearch = [];\r\n        if(this.state.searched){\r\n            sortedSearch = this.state.searched.sort((a, b) => (a.name.toLowerCase() > b.name.toLowerCase()) ? 1 : -1);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {this.state.loader ?\r\n                    <Grid container direction={\"row\"} justify={\"center\"} alignItems={\"center\"}>\r\n                        <Grid item>\r\n                            <CircularProgress/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    :\r\n                    <Container>\r\n                        <form onSubmit={this.searchExchanges}>\r\n                            <TextField type={\"search\"} placeholder={\"Search Exchanges\"} onChange={e => this.setState({searchField: e.target.value})}/>\r\n                            <Button type={\"submit\"} variant={\"outlined\"} size={\"small\"}><SearchIcon fontSize={\"large\"}/></Button>\r\n                        </form>\r\n                        <Grid container spacing={3}>\r\n                            {\r\n                                sortedSearch.map(exchange => {\r\n                                    let img = this.state.images.find(image => image.exchange_id===exchange.exchange_id)\r\n\r\n                                    return (\r\n                                        <Grid item md={3} key={exchange.exchange_id}  onClick={() => this.navigate(exchange.exchange_id, img)}>\r\n                                            <CryptoCard data={exchange} image={img}/>\r\n                                        </Grid>\r\n                                    )\r\n                                })\r\n                            }\r\n                            {\r\n                                this.state.searched.length===0 && (\r\n                                    <p>Exchanges failed to load.</p>\r\n                                )\r\n                            }\r\n                        </Grid>\r\n                    </Container>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ExchangeList);","import React, {Component} from \"react\";\r\nimport ExchangeList from \"./ExchangeList\";\r\n\r\nclass ExchangesIndex extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1 className={\"pageTitle\"}>Crypto Exchanges</h1>\r\n                <ExchangeList/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExchangesIndex;","import React, {Component} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass ExchangePage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let date = new Date();\r\n\r\n        let endDate = new Date(date.setMinutes(date.getMinutes()-date.getTimezoneOffset()));\r\n        endDate = endDate.toISOString().slice(0, -5);\r\n\r\n        let startDate = new Date(date.setSeconds(date.getSeconds()-10));\r\n        startDate = startDate.toISOString().slice(0, -5);\r\n\r\n        this.state = {\r\n            exchangeId: \"\",\r\n            exchange: {},\r\n            logo: this.props.location.img || {},\r\n            assets: {},\r\n            loader: true,\r\n            loader2: false,\r\n            quote: \"\",\r\n            base: \"\",\r\n            limit: 100,\r\n            startTime: startDate,\r\n            endTime: endDate,\r\n            graphData: [],\r\n            numTrades: 0,\r\n            graphNote: \"\"\r\n        };\r\n\r\n        this.resetDates = this.resetDates.bind(this);\r\n        this.toggleExpand = this.toggleExpand.bind(this);\r\n        this.fetchSnapshot = this.fetchSnapshot.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let exchangeId = this.props.match.params.name;\r\n\r\n        let headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-CoinAPI-Key': process.env.REACT_APP_APIKEY\r\n        }\r\n\r\n        let exchange = await fetch('https://rest.coinapi.io/v1/exchanges/'+exchangeId, {headers: headers})\r\n            .then(res => res.json())\r\n            .catch(err => console.error(err));\r\n\r\n        if(exchange.length>0) exchange = exchange[0];\r\n\r\n        let symbols = await fetch('https://rest.coinapi.io/v1/symbols/'+exchangeId, {headers: headers})\r\n            .then(res => res.json())\r\n            .catch(err => console.error(err));\r\n\r\n        let assets = {};\r\n\r\n        if(!symbols.error){\r\n            symbols.forEach(symbol => {\r\n                if(assets[symbol.asset_id_base]){\r\n                    assets[symbol.asset_id_base][symbol.asset_id_quote] = symbol;\r\n                }\r\n                else{\r\n                    assets[symbol.asset_id_base] = {};\r\n                    assets[symbol.asset_id_base][symbol.asset_id_quote] = symbol;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            exchangeId: exchangeId,\r\n            exchange: exchange,\r\n            symbols: symbols,\r\n            assets: assets,\r\n            loader: false\r\n        });\r\n    }\r\n\r\n    navigate(){\r\n        this.props.history.push({\r\n            pathname: '/'\r\n        });\r\n    }\r\n\r\n    async fetchSnapshot(){\r\n        this.setState({\r\n            loader2: true\r\n        });\r\n\r\n        let headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-CoinAPI-Key': process.env.REACT_APP_APIKEY\r\n        }\r\n\r\n        let limit = this.state.limit;\r\n        let startDate = this.state.startTime;\r\n        let endDate = this.state.endTime;\r\n        let symbolId = this.state.assets[this.state.base][this.state.quote].symbol_id;\r\n\r\n        let snap = await fetch(`https://rest.coinapi.io/v1/trades/${symbolId}/history?time_start=${startDate}&time_end=${endDate}&limit=${limit}`, {headers: headers})\r\n            .then(res => res.json())\r\n            .catch(err => console.error(err));\r\n\r\n        let data = [];\r\n\r\n        if(!snap.error){\r\n            if(snap.length===0){\r\n                this.setState({\r\n                    graphNote: \"No data available for this query.\",\r\n                    loader2: false\r\n                });\r\n                return;\r\n            }\r\n\r\n            snap.forEach(trade => {\r\n                let date = new Date(trade.time_exchange.split(\".\")[0]);\r\n\r\n                if(data.length>0){\r\n                    let lastDateObj = data[data.length-1];\r\n\r\n                    if(lastDateObj.time===date){\r\n                        if(trade.taker_side===\"BUY\" || trade.taker_side===\"BUY_ESTIMATED\"){\r\n                            lastDateObj.buy+=trade.size;\r\n                        }\r\n                        else if(trade.taker_side===\"SELL\" || trade.taker_side===\"SELL_ESTIMATED\"){\r\n                            lastDateObj.sell+=trade.size;\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n                let obj = {\r\n                    time: date,\r\n                    buy: 0,\r\n                    sell: 0,\r\n                    timeString: date.toISOString().split(\"T\")[0] + \"(\" + date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds() + \")\"\r\n                }\r\n\r\n                if(trade.taker_side===\"BUY\" || trade.taker_side===\"BUY_ESTIMATED\"){\r\n                    obj.buy=trade.size;\r\n                }\r\n                else if(trade.taker_side===\"SELL\" || trade.taker_side===\"SELL_ESTIMATED\"){\r\n                    obj.sell=trade.size;\r\n                }\r\n\r\n                data.push(obj);\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            graphData: data,\r\n            graphNote: \"Number of trades within this period: \"+snap.length,\r\n            loader2: false\r\n        });\r\n    }\r\n\r\n    resetDates(){\r\n        let date = new Date();\r\n\r\n        let endDate = new Date(date.setMinutes(date.getMinutes()-date.getTimezoneOffset()));\r\n        endDate = endDate.toISOString().slice(0, -5);\r\n\r\n        let startDate = new Date(date.setSeconds(date.getSeconds()-10));\r\n        startDate = startDate.toISOString().slice(0, -5);\r\n\r\n        this.setState({\r\n            startTime: startDate,\r\n            endTime: endDate\r\n        });\r\n    }\r\n\r\n    selectBase(e){\r\n        if(e!==this.state.base){\r\n            this.setState({\r\n                base: e,\r\n                quote: \"\"\r\n            });\r\n        }\r\n    }\r\n\r\n    selectQuote(e){\r\n        this.setState({\r\n            quote: e\r\n        });\r\n    }\r\n\r\n    selectStart(e){\r\n        this.setState({\r\n            startTime: e.target.value\r\n        });\r\n    }\r\n\r\n    selectEnd(e){\r\n        this.setState({\r\n            endTime: e.target.value\r\n        });\r\n    }\r\n\r\n    setLimit(e){\r\n        this.setState({\r\n            limit: e\r\n        });\r\n    }\r\n\r\n    toggleExpand(){\r\n        this.setState({\r\n            expand: !this.state.expand\r\n        });\r\n    }\r\n\r\n    render(){\r\n        let assets = Object.keys(this.state.assets).sort();\r\n\r\n        let quotes = [];\r\n        if(this.state.base.length>0){\r\n            quotes = (Object.keys(this.state.assets[this.state.base])).sort();\r\n        }\r\n\r\n        let isFetchDisabled = (new Date(this.state.startTime)>new Date(this.state.endTime)) ||\r\n            (new Date(this.state.startTime)>new Date()) ||\r\n            this.state.base.length===0 || this.state.quote.length===0;\r\n\r\n        return (\r\n            <div>\r\n                {this.state.loader ?\r\n                    <Grid container direction={\"row\"} justify={\"center\"} alignItems={\"center\"}>\r\n                        <Grid item>\r\n                            <CircularProgress/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    :\r\n                    <Container className={\"cardDiv\"} >\r\n                        <div className={\"exchangeHeader\"}>\r\n                            <Button className={\"exchangeHeaderIcon\"} variant={\"outlined\"} onClick={() => this.navigate()}><ArrowBackIcon fontSize={\"large\"}/></Button>\r\n                            <span>{this.state.exchange.name} Trading</span>\r\n                        </div>\r\n                        <Grid container>\r\n                            <Grid item md={3}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item>\r\n                                        <Autocomplete\r\n                                            id=\"baseValue\"\r\n                                            options={assets}\r\n                                            getOptionLabel={(option) => option}\r\n                                            onChange={(e, val) => this.selectBase(val)}\r\n                                            style={{ width: 300 }}\r\n                                            renderInput={(params) => <TextField {...params} label=\"Choose Base\" variant=\"outlined\" />}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Autocomplete\r\n                                            id=\"quoteValue\"\r\n                                            options={quotes}\r\n                                            getOptionLabel={(option) => option}\r\n                                            onChange={(e, val) => this.selectQuote(val)}\r\n                                            style={{ width: 300 }}\r\n                                            renderInput={(params) => <TextField {...params} label=\"Choose Quote\" variant=\"outlined\" />}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            id=\"startTime\"\r\n                                            label=\"Start Time\"\r\n                                            type=\"datetime-local\"\r\n                                            variant={\"outlined\"}\r\n                                            value={this.state.startTime}\r\n                                            onChange={(e) => this.selectStart(e)}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            id=\"endTime\"\r\n                                            label=\"End Time\"\r\n                                            type=\"datetime-local\"\r\n                                            variant={\"outlined\"}\r\n                                            value={this.state.endTime}\r\n                                            onChange={(e) => this.selectEnd(e)}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Typography id=\"discrete-slider\" gutterBottom>\r\n                                            Limit Results\r\n                                        </Typography>\r\n                                        <Slider\r\n                                            defaultValue={100}\r\n                                            aria-labelledby=\"discrete-slider\"\r\n                                            valueLabelDisplay=\"auto\"\r\n                                            step={100}\r\n                                            marks\r\n                                            min={100}\r\n                                            max={2000}\r\n                                            onChangeCommitted={(e, val) => this.setLimit(val)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button variant={\"outlined\"} onClick={this.resetDates}>Reset Dates</Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button disabled={isFetchDisabled} variant={\"outlined\"} onClick={this.fetchSnapshot}>{this.state.loader2 ? <CircularProgress/> : \"Fetch\"}</Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <p style={{color: \"red\"}}>{this.state.graphNote}</p>\r\n                                        <p><i>The values of Buy and Sell on the graph refers to the unit of the Base that is chosen. The graph shows the amount of units of the chosen Base that was bought or sold within a particular second.</i></p>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item md={9}>\r\n                                <LineChart width={730} height={500} data={this.state.graphData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"timeString\" />\r\n                                    <YAxis />\r\n                                    <Tooltip />\r\n                                    <Legend />\r\n                                    <Line type=\"monotone\" dataKey=\"buy\" stroke=\"#8884d8\" />\r\n                                    <Line type=\"monotone\" dataKey=\"sell\" stroke=\"#82ca9d\" />\r\n                                </LineChart>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ExchangePage);","import './App.css';\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport ExchangesIndex from \"./Components/ExchangesIndex\";\nimport Container from \"@material-ui/core/Container\";\nimport ExchangePage from \"./Components/ExchangePage\";\n\nfunction App() {\n    console.log(process.env.PUBLIC_URL);\n  return (\n      <Router basename={process.env.PUBLIC_URL}> \n        <Grid container>\n            <Container>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <ExchangesIndex/>\n                    </Route>\n                </Switch>\n                <Switch>\n                    <Route exact path=\"/exchange/:name\">\n                        <ExchangePage/>\n                    </Route>\n                </Switch>\n            </Container>\n        </Grid>\n      </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}